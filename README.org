
* ll.lisp

This project is an extremely simplistic parser for LL grammars. It is recursive, non-predictive, and doesn't handle grammars with left-recursion. It is simply an exercise in brevity, and much is left undone (such as providing a macro interface to =MATCH= and =PARSE= so one doesn't have to use quotes everywhere) to make the code as short as possible.

It also does not handle epsilon (empty string) matching yet. The parse-tree generation isn't completely worked out yet either, but I don't think it should be too hard to fix. (Maybe.)

It's actually quite comical to see just how inefficient non-predictive parsing is. Uncomment the FORMAT line in PARSE-IMPL for a taste.

** Examples

Basically basic:

#+BEGIN_EXAMPLE
(defun goal () '((x)))

(defun x ()
    '((1 2)
      (4 f 5)
      ('x)))

(defun f ()
    '((4 9)
      (4 5)))

(match '(goal) '(4 4 5 5))
=> T

(match '(goal) '(4 4 5 5 1))
=> NIL

(parse '(goal) '(4 4 5 5))
=> ((4) (4 5) (5))

(parse '(goal) '(4 4 5 5 1))
=> NIL
#+END_EXAMPLE

Simple single-digit calculator:

#+BEGIN_EXAMPLE
(defun calc () '((expression)))

(defun expression ()
    '((value)
      (value operator expression)))

(defun operator ()
    '((:+)
      (:-)))

(defun sign ()
    '((:-)
      (:+)))

(defun value ()
    '((num)
      (sign num)))

(defun num () '((1) (2) (3) (4) (5) (6) (7) (8) (9) (0)))

(match '(calc) '(1 :+ 3))
=> T
#+END_EXAMPLE
